// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Category {
  GENERAL
  FUNNY
  SPORTS
  MUSIC
  MOVIES
  TV
  SCIENCE
  HISTORY
  GEOGRAPHY
  ART
  CELEBRITIES
  SKILLS
  SUPERPOWERS
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model User {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  score             Int                 @default(0)
  accounts          Account[]
  sessions          Session[]
  questionsVoted    QuestionVoted[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}


model Deck {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  
  questions Question[]
}

model Question {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  question  String
  option_a  String
  option_b  String
  slug      String  @unique
  is_active  Boolean @default(true)

  option_a_votes Int @default(0)
  option_b_votes Int @default(0)

  category  Category[]

  deck Deck @relation(fields: [deckId], references: [id])
  deckId String

  votes QuestionVoted[]
}

model QuestionVoted {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  question  Question @relation(fields: [questionId], references: [id])
  questionId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  option    String
}